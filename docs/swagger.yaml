definitions:
  dto.CreateQuoteRequest:
    properties:
      author:
        type: string
      quote:
        type: string
    type: object
  dto.CreateQuoteResponse:
    properties:
      id:
        type: string
    type: object
  dto.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  dto.GetAllQuotesResponse:
    properties:
      author:
        type: string
      created_at:
        type: string
      id:
        type: string
      quote:
        type: string
    type: object
  dto.GetRandomQuoteResponse:
    properties:
      author:
        type: string
      created_at:
        type: string
      id:
        type: string
      quote:
        type: string
    type: object
info:
  contact: {}
paths:
  /quotes:
    get:
      description: Returns all of the quotes or filters by author if query is provided
      parameters:
      - description: Quote author
        in: query
        name: author
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.GetAllQuotesResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get quotes
      tags:
      - quotes
    post:
      consumes:
      - application/json
      description: Creates a new record with provided quote
      parameters:
      - description: Quote payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.CreateQuoteRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.CreateQuoteResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Create a new quote
      tags:
      - quotes
  /quotes/{id}:
    delete:
      description: Deletes a quote by it's UUID
      parameters:
      - description: Quote ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: invalid ID
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Delete quote by ID
      tags:
      - quotes
  /quotes/random:
    get:
      description: Returs random quote
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetRandomQuoteResponse'
        "404":
          description: if there's no stored qoutes
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get a random quote
      tags:
      - quotes
swagger: "2.0"
